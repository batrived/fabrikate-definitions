---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: geneva-metrics
  namespace: {{.Release.Namespace}}
  labels:
    daemon: geneva-metrics
spec:
  selector:
    matchLabels:
      daemon: geneva-metrics
  template:
    metadata:
      labels:
        daemon: geneva-metrics
    spec:
      containers:
        - name: linux-geneva-agent-aksmsi
          image: "{{.Values.acr.name}}.azurecr.io/{{.Values.geneva.metricsAksmsi.image.name}}:{{.Values.geneva.metricsAksmsi.image.tag}}"
          volumeMounts:
            - name: azure-config
              mountPath: /secrets/ad-creds/azure.json
              subPath: azure.json
              readOnly: true
        - name: linux-geneva-agent-metrics
          image: "{{.Values.acr.name}}.azurecr.io/{{.Values.geneva.metrics.image.name}}:{{.Values.geneva.metrics.image.tag}}"
          resources:
            requests:
              cpu: "50m"
              memory: "250Mi"
            limits:
              cpu: "100m"
              memory: "500Mi"
          env:
            - name: METRIC_ENDPOINT
              value: "https://global.metrics.nsatc.net/"
            - name: MDM_ACCOUNT
              value: "{{.Values.geneva.account}}"
            - name: MDM_QUIET
              value: "true"
            - name: MDM_VERBOSE
              value: "false"
            - name: MDM_LOG_LEVEL
              value: "Error"
            - name: MDM_SSL_DIGEST
              value: "sha1"
            - name: KEY_VAULT
              value: "{{.Values.kv.name}}"
            - name: TENANT
              value: "{{.Values.global.tenantId}}"
            - name: ROLE
              value: "{{.Values.aks.clusterName}}"
            - name: TELEGRAF_MEMORY
              value: "80m"
            - name: TELEGRAF_IMAGE
              value: "{{.Values.geneva.metricsTelegraf.image.name}}:{{.Values.geneva.metricsTelegraf.image.tag}}"
            - name: REGISTRY_URL
              value: "{{.Values.acr.name}}.azurecr.io"
            - name: REGISTRY_USERNAME
              value: "{{.Values.acr.name}}"
            - name: HOST_ETC
              value: "/rootfs/etc"
            - name: HOST_PROC
              value: "/rootfs/proc"
            - name: HOST_SYS
              value: "/rootfs/sys"
            - name: HOST_MOUNT_PREFIX
              value: "/hostfs"
          volumeMounts:
            - name: docker
              mountPath: /var/run/docker.sock
            - name: etc
              mountPath: /rootfs/etc
              readOnly: true
            - name: etw
              mountPath: /var/etw
            - name: proc
              mountPath: /rootfs/proc
            - name: root
              mountPath: /hostfs
              readOnly: true
            - name: sys
              mountPath: /rootfs/sys
              readOnly: true
            - name: telegraf
              mountPath: /var/run/appcenter-telegraf
            - name: udev
              mountPath: /run/udev
              readOnly: true
      imagePullSecrets:
      - name: acr-auth
      volumes:
        - name: azure-config
          configMap:
            name: azure-config
        - name: docker
          hostPath:
            path: /var/run/docker.sock
            type: Socket
        - name: etc
          hostPath:
            path: /etc
        - name: etw
          hostPath:
            path: /var/etw
        - name: proc
          hostPath:
            path: /proc
        - name: root
          hostPath:
            path: /
        - name: sys
          hostPath:
            path: /sys
        - name: telegraf
          hostPath:
            path: /var/run/appcenter-telegraf
            type: DirectoryOrCreate
        - name: udev
          hostPath:
            path: /run/udev
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: geneva-services
  labels:
    app: geneva-services
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: geneva-services
  template:
    metadata:
      annotations:
        mdsd.xml-crc32: "{{.Values.geneva.crc32.mdsd}}"
        fluentd-api.conf-crc32: "{{.Values.geneva.crc32.fluentdApi}}"
        fluentd-container-logs.conf-crc32: "{{.Values.geneva.crc32.fluentdContainerLogs}}"
        fluentd-systemd.conf-crc32: "{{.Values.geneva.crc32.fluentdSystemd}}"
        fluentd.conf-crc32: "{{.Values.geneva.crc32.fluentd}}"
      labels:
        name: geneva-services
    spec:
      hostNetwork: true
      serviceAccount: geneva
      containers:

        # MDSD
        - name: mdsd
          image: "{{.Values.acr.name}}.azurecr.io/{{.Values.geneva.mdsd.image.name}}:{{.Values.geneva.mdsd.image.tag}}"
          resources:
            requests:
              cpu: "250m"
              memory: "2Gi"
            limits:
              cpu: "500m"
              memory: "4Gi"
          env:
          - name: TENANT
            value: "{{.Values.geneva.tenant}}"
          - name: ROLE
            value: "{{.Values.geneva.role}}"
          - name: ROLEINSTANCE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MONITORING_GCS_ENVIRONMENT
            value: "{{.Values.geneva.environment}}"
          - name: MONITORING_GCS_ACCOUNT
            value: "{{.Values.geneva.account}}"
          - name: MONITORING_GCS_REGION
            value: "{{.Values.aks.location}}"
          volumeMounts:
            - name: mdsd-auth-vol
              mountPath: /geneva/geneva_auth
            - name: mdsd-conf-vol
              mountPath: /geneva/geneva_config
            - name: var-log-vol
              mountPath: /geneva/geneva_logs
            - name: mdsd-run-vol
              mountPath: /var/run/mdsd

        # FluentD
        - name: fluentd
          image: "{{.Values.acr.name}}.azurecr.io/{{.Values.geneva.fluentd.image.name}}:{{.Values.geneva.fluentd.image.tag}}"
          env:
            - name: FLUENTD_CONF
              value: /etc/fluentd/fluentd.conf
          volumeMounts:
            - name: fluentd-conf-vol
              mountPath: /etc/fluentd
            - name: fluentd-buffer-vol
              mountPath: "/var/log/td-agent"
            - name: mdsd-run-vol
              mountPath: "/var/run/mdsd"
            - name: docker-log-vol
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: var-log-vol
              mountPath: /var/log
            - name: run-journal-vol
              mountPath: /run/log/journal
              readOnly: true

        # Janitor
        - name: janitor
          image: alpine
          command: ["/bin/sh"]
          args: ["/janitor/janitor_start.sh"]
          volumeMounts:
            - name: var-log-vol
              mountPath: /geneva/geneva_logs
            - name: janitor-conf-vol
              mountPath: /janitor

        # AzSecPack
        - name: azsecpack
          image: "{{.Values.acr.name}}.azurecr.io/{{.Values.geneva.azsecpack.image.name}}:{{.Values.geneva.azsecpack.image.tag}}"
          resources:
            requests:
              cpu: "50m"
              memory: "75Mi"
            limits:
              cpu: "100m"
              memory: "250Mi"
          env:
            - name: AzSecPack_GCS_cert
              value: "/secrets/gcscert.pem"
            - name: AzSecPack_GCS_key
              value: "/secrets/gcskey.pem"
            - name: AzSecPack_GCS_Environment
              value: "{{.Values.global.envName}}"
            - name: AzSecPack_GCS_Account
              value: "{{.Values.geneva.account}}"
            - name: AzSecPack_EventVersion
              value: "8"
            - name: AzSecPack_Timestamp
              value: "2018-05-08T20:00:00.000"
            - name: AzSecPack_Namespace
              value: "{{.Values.geneva.namespace}}"
            - name: AzSecPack_Moniker
              value: "{{.Values.geneva.mdsd.monikers.security.name}}"
            - name: AzSecPack_Tenant
              value: "{{.Values.geneva.tenant}}"
            - name: AzSecPack_Role
              value: "{{.Values.geneva.role}}"
            - name: AzSecPack_RoleInstance
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: AzSecPack_MachineName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: AzSecPack_MonitorForFailure
              value: "1"
          volumeMounts:
            - mountPath: /host
              name: azsecpack-host
              readOnly: false
            - mountPath: /secrets
              name: azsecpack-auth-vol

      imagePullSecrets:
      - name: acr-auth

      volumes:

        # MDSD
        - name: mdsd-conf-vol
          configMap:
            name: mdsd-conf
        - name: mdsd-run-vol
          emptyDir: {}
        - name: mdsd-auth-vol
          secret:
            secretName: geneva-certificate

        # FluentD
        - name: fluentd-conf-vol
          configMap:
            name: fluentd-conf
        - name: fluentd-buffer-vol
          emptyDir: {}
        - name: docker-log-vol
          hostPath:
            path: /var/lib/docker/containers
        - name: run-journal-vol
          hostPath:
            path: /run/log/journal
        - name: var-log-vol
          hostPath:
            path: /var/log

        # AzSecPack
        - name: azsecpack-host
          hostPath:
            path: /
        - name: azsecpack-auth-vol
          secret:
            secretName: geneva-certificate

        # Janitor
        - name: janitor-conf-vol
          configMap:
            name: janitor-conf